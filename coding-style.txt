Use of C++/religion
===================

The source code is mostly C-like C++. Modularization with implementation hiding
and clean interfaces can be had without classes, and IMO it often improves code
clarity by reducing clutter. I tend to reserve classes for general-purpose
objects with multiple instances, and keep the rest (e.g., anything that would
be a singleton) as plain functions and globals (with internal linkage for
"private" data).

Templates and references are nice to have, as are various minor improvements to
C features in C++.


Header files
============

All .cpp files include headers according to this scheme:


#include "common.h"

<#includes for local headers>

<#includes for system headers>


common.h includes general utility functions and types as well as common system
headers. Nesalizer still builds in less than a second in debug mode and in
about three seconds in release mode on my system (with -j8), so over-inclusion
of system headers probably won't be a huge deal (it might be in larger
projects). I also think it's better to catch collisions with standard
identifiers early.

The above setup allows most headers to assume that common.h has been included,
which simplifies headers and often makes include guards redundant.


Comments/religion
=================

Code alone only communicates the "what" of an algorithm at the lowest level.
Comments clarify what the code is trying to accomplish, how it does it, and why
it does it, and saves peoples' time in general. A broken comment should be
fixed.

If something seems undercommented, please tell me.
